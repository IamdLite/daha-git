from typing import Dict, Set, List, Any, Optional
import logging
from api.client import CourseAPIClient, APIError
from configs.settings import settings, SUBJECT_TO_CATEGORY, DIFFICULTY_TO_LEVEL, GRADE_TO_ID



logger = logging.getLogger(__name__)


def _convert_filters_to_api_params(filters: Dict[str, Set]) -> Dict[str, Any]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –±–æ—Ç–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API

    Args:
        filters: –§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–æ—Ç–∞

    Returns:
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
    """
    api_params = {}

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ category_id
    if filters.get("subjects"):
        subjects = filters["subjects"]
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É)
        for subject in subjects:
            if subject in SUBJECT_TO_CATEGORY:
                api_params['category_id'] = SUBJECT_TO_CATEGORY[subject]
                break

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ level
    if filters.get("difficulty"):
        difficulties = filters["difficulty"]
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        for difficulty in difficulties:
            if difficulty in DIFFICULTY_TO_LEVEL:
                api_params['level'] = DIFFICULTY_TO_LEVEL[difficulty]
                break

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –≤ grade_id
    if filters.get("grade"):
        grades = filters["grade"]
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Å
        for grade in grades:
            if isinstance(grade, str) and grade.isdigit():
                grade = int(grade)
            if grade in GRADE_TO_ID:
                api_params['grade'] = {
                    "id": GRADE_TO_ID[grade],
                    "level": grade
                    }
                break

    return api_params


class CourseFilter:

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            #config.validate()
            logger.info(self, "API client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.api_client = CourseAPIClient()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CourseFilter: {e}")
            raise

    def filter_courses(self, filters: Dict[str, Set]) -> List[Dict[str, Any]]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫—É—Ä—Å—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º —á–µ—Ä–µ–∑ API

        Args:
            filters: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API
            logger.info(filters)
            api_params = _convert_filters_to_api_params(filters)

            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {api_params}")

            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ API
            if api_params:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                result = self.api_client.get_courses(**api_params)
                courses = result['courses']
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ API, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã
                courses = self.api_client.get_all_courses()



            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(courses)} –∫—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

            return courses

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API
            return []
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
            return []

    def get_course_by_id(self, course_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ ID

        Args:
            course_id: ID –∫—É—Ä—Å–∞

        Returns:
            –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –∏–ª–∏ None
        """
        try:
            # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å API –∫–ª–∏–µ–Ω—Ç
            # –ü–æ–∫–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã –∏ –∏—â–µ–º –Ω—É–∂–Ω—ã–π
            all_courses = self.api_client.get_all_courses()
            for course in all_courses:
                if course.get('id') == course_id:
                    return course
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ {course_id}: {e}")
            return None

    @staticmethod
    def format_course_message(course: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Args:
            course: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫—É—Ä—Å–∞

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        grade_list = ""
        for grade in course['grades']:
            grade_list += (str(({grade['level']}).pop())) + ", "
        

        return (
            f"{course.get('title')}\n"
            f"–ü—Ä–µ–¥–º–µ—Ç(-—ã) üìö: {course['category']['name']}\n"
            f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä üß≠: {course['provider']}\n"
            f"–ö–ª–∞—Å—Å(-—ã) üè´:" + grade_list + "\n"
            f"–°–ª–æ–∂–Ω–æ—Å—Ç—å üéöÔ∏è: {course['level']}\n"
            f"–î–∞—Ç—ã üóìÔ∏è: {course['start_date']} - {course['end_date']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ üìú:\n\n{course['description']}\n\n"
            f"–°—Å—ã–ª–∫–∞ ‚ÜòÔ∏è\n"
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
course_filter = CourseFilter()


